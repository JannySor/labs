// Lab 1 Задание 1
// Выведите свои собственные фразы в консоль.

import Foundation
print("Меня зовут Женя")
print("У меня есть собака")


// Lab 1 Задание 2
//Давайте создадим константу под названием friends, которая будет представлять количество ваших друзей в социальных сетях. Для этого мы присвоим ей значение от 50 до 1000. Выведите значение этой константы.
var friends = 72
print("count of friends: \(friends)")
//Теперь предположим, что вам надо удалить друзей, которые не активны в социальных сетях. Попытайтесь обновить константу friends до меньшего значения, чем сейчас. Наблюдайте, что происходит, а затем переходите к следующему шагу.
friends = 34
//Компилируется ли приведенный выше код? Почему нет? Вернитесь назад и сделайте так чтобы значение friends могло меняться и код скомпилировался правильно.
// Код не компилировался потому что значение константы нельзя менять, поэтому я поменяла let на var(переменную)


//Lab 1 Задание 3
//Вашему фитнес трекеру нужно знать вашу цель по шагам на день. Создайте константу goalSteps и установите для нее значение 10000.
var goalSteps = 10000


//Lab 1 Задание 4
//Создайте переменную schooling и задайте для нее количество лет обучения в школе, которое вы закончили. Выведите schooling в консоль.
var schooling = 11
print("schooling: \(schooling)")
//Теперь представьте, что вы только что закончили дополнительный год в школе, и соответствующим образом обновите переменную schooling. Выведите значение переменной schooling в консоль.
schooling = 12
print("new schooling: \(schooling)")
//Компилируется ли приведенный выше код? Почему это отличается от попытки обновить константу? Выведите свое объяснение, используя функцию print.
print("var это переменные, их значение всегда можно менять, для этого они и нужны \nlet это константа, они нужны для хранения значений, которые не будут изменяться")


//Lab 1 Задание 5
//Давайте создадим переменную, которая будет отображать количество шагов, которые мы делаем в течение дня. Назовем его steps. Сначала установим его значение на 0, потому что мы еще не начали ходить. Давайте выведем значение steps в консоль, чтобы увидеть, что количество шагов равно 0 в начале дня.
var steps = 0
print("count of steps: \(steps)")
//Давайте представим, что наш фитнес трекер отслеживал наши шаги и мы хотим показать пользователю количество шагов, которое мы сделали до этого момента. Для этого мы обновим значение переменной steps до 2000. После этого выводите обновленное значение steps в консоль, чтобы увидеть, что мы прошли 2000 шагов. Затем выводите в консоль сообщение «Хорошая работа! Вы уже на пути к своей ежедневной цели», чтобы поощрить пользователя продолжать двигаться в течение дня.
steps = 2000
print("new count of steps: \(steps)")
print("Хорошая работа! Вы уже на пути к своей ежедневной цели")


//Lab 1 Задание 6
//Создайте переменную name типа String, но не присваивайте ей значение. Выведите имя в консоль. Код компилируется? Удалите любой код, который не будет компилироваться.
var name: String
//Теперь присвойте значение name и выведите его на консоль.
name = "Alex"
print("name: \(name)")


//Lab 1 Задание 7
//Создайте переменную distanceTraveled (пройденная дистанция) и установите для нее значение 0. Не указывайте ей явный тип.
var distanceTraveled: Double = 0
//Теперь обновите значение distanceTraveled на 54.3. Код компилируется? Вернитесь назад и установите явный тип для distanceTraveled, чтобы код скомпилировался.
distanceTraveled = 54.3


//Lab 2.1 Задание 1
//Вы решили построить сарай и хотите заранее знать площадь своего двора, которую он займет. Создайте две константы, width (ширина) и height (высота), со значениями 10 и 20 соответственно. Создайте константу area (площадь), которая является результатом умножения двух предыдущих констант. Выведите результат на консоль.
let width = 10
let height = 20
let area = width * height
print("area: \(area)")
//Вы решаете разделить сарай на две комнаты. Вы хотите знать, останется ли достаточно места при разделении поровну для некоторых из ваших более крупных предметов хранения. Создайте константу roomArea, которая является результатом деления area пополам. Выведите результат на консоль.
let roomArea = area / 2
print("room area: \(roomArea)")
//Создайте константу perimeter, значение которой равно width + width + height  + height, затем выведите результат на консоль.
let perimeter = width*2 + height*2
print("perimeter: \(perimeter)")


//Lab 2.1 Задание 2
//Создайте целочисленную(Int) константу значение которого равна 12. Используя оператор модуля(%), нужно посчитать остаток от 12, деленного на 5.
let x = 12
let y = x % 5
print("остаток от 12, деленного на 5: \(y)")


//Lab 2.1 Задание 3
//Представьте, что у вас есть фитнес-трекер, который может отслеживать, сколько раз ваше сердце бьется за минуту. Для этого нам нужны константы: heartRate1, heartRate2 и heartRate3 (частота серцебиения), затем нужно присвоить им разные значения от 60 до 100. Теперь вы хотите узнать среднее значение, чтобы понять, как часто ваше сердце обычно бьется за последний час. Для этого создайте константу addedHR, равную сумме всех трех сердечных сокращений, а затем еще одну константу под названием averageHR (средняя частота сердечных сокращении), которая равна addedHR, разделенной на 3, чтобы получить среднее значение. Выведите результат, чтобы узнать, сколько раз ваше сердце обычно бьется за последний час.
let (heartRate1, heartRate2, heartRate3) = (62, 72, 99)
let addedHR = heartRate1 + heartRate2 + heartRate3
let averageHR = addedHR / 3
print("averageHR: \(averageHR)")
//Теперь создайте еще три константы: heartRate1D, heartRate2D и heartRate3D, равные тем же значениям, что и heartRate1, heartRate2 и heartRate3. Эти новые константы должны быть типа Double. Создайте константу addedHRD, равную сумме всех трех сердечных сокращений. Создайте константу под названием averageHRD, которая равняется addedHRD,  деленному на 3, чтобы получить среднее значение ваших новых констант сердечных сокращении.. Выведите результат на консоль. Отличается ли это от вашего предыдущего среднего значения? Почему или почему нет?
let heartRate1D: Double = Double(heartRate1)
let heartRate2D: Double = Double(heartRate2)
let heartRate3D: Double = Double(heartRate3)
let addedHRD = heartRate1D + heartRate2D + heartRate3D
let averageHRD = addedHRD / 3
print("averageHRD: \(averageHRD)")
// Отличается, потому что при делении получившегося значения на 3 есть остаток, который округляется при типе Int до целого числа


//Lab 2.1 Задание 4
//У вас есть приложение, которое отслеживает количество шагов, которые вы делаете в течение дня. Ваша цель - 10 000 шагов, но на данный момент вы прошли только 3467 шагов. Создайте две константы с названиями steps (шаги) и goal (цель). steps должна быть равна 3467, а goal — 10 000 и обе должны быть типа Double, чтобы вы могли выполнять точные вычисления. Теперь создайте новую константу под названием percentOfGoal , которая вычислит процент от цели, которая была достигнута на данный момент.
let stepsTask4: Double = 3467
let goal: Double = 10000
let percentOfGoal = stepsTask4 / (goal / 100)


//Lab 2.1 Задание 5
//У вас есть счет в Kaspi. Создайте переменную balance который равен 0 тенге. (Используйте составной оператор)
var balance = 0
//1. Вы зарабатываете 10 000 тенге, стригя газон своей соседки.
balance += 10000
print("balance: \(balance)")
//2. Еще 20 000 тенге за случайные работы в течение недели.
balance += 20000
print("balance: \(balance)")
//3. Вы тратите половину своих денег на ужин и кино.
balance /= 2
print("balance: \(balance)")
//4. После этого вы моете окна и сумма на вашем счете утраивается.
balance *= 3
print("balance: \(balance)")
//5. Затем вы тратите 3 000 тенге в магазине.
balance -= 3000
print("balance: \(balance)")
//Выведите баланс своего счета после каждого шага в консоль.


//Lab 2.1 Задание 6
//Это задание про математические выражения, где нужно понимать приоритет операций и использовать скобки для того чтобы указать порядок выполнения действий.
//Выведите то что по вашему мнению,  дает 10 + 2 * 5. Затем выведите фактическое выражение (например, print(10 + 2 * 5) ).
print("10 + 2 * 5 = 20")
print(10 + 2 * 5)
//В отдельном операторе print добавьте необходимые круглые скобки, чтобы поменять порядок выполнения действий.
print((10 + 2) * 5)
//Теперь выведите то что по вашему мнению,  дает 4 * 9 - 6 / 2? Затем выведите фактическое выражение.
print("4 * 9 - 6 / 2 = 33")
print(4 * 9 - 6 / 2)
//В отдельном операторе print добавьте необходимые круглые скобки, чтобы вычитание имело приоритет над умножением и делением.
print(4 * (9 - 6) / 2)


//Lab 2.2 Задание 1
//Для каждого из приведенных ниже логических выражений выведите то, каким, по вашему мнению, будет результат («истина» или «ложь»). Затем выведите фактическое выражение, чтобы увидеть, были ли вы правы.
9 == 9
print(true)
print(9 == 9)
9 != 9
print(false)
print(9 != 9)
47 > 90
print(false)
print(47 > 90)
47 < 90
print(true)
print(47 < 90)
4 <= 4
print(true)
print(4 <= 4)
4 >= 5
print(false)
print(4 >= 5)
(47 > 90) && (47 < 90)
print(false)
print((47 > 90) && (47 < 90))
(47 > 90) || (47 < 90)
print(true)
print((47 > 90) || (47 < 90))
!true
print(false)
print(!true)


//Lab 2.2 Задание 2
//Представьте, что вы создаете машину, которая будет считать ваши деньги и сообщать вам, ваше финансовое состояние, исходя из того, сколько у вас денег. Вам была дана переменная tenge со значением 0. Напишите оператор if, который печатает "Извини, но ты на мели!" если tenge имеют значение 0. Посмотрите, что выводится на консоль.
//tenge обновите до значения 300. Теперь, напишите оператор if-else, который печатает "Извини, но ты на мели!" если tenge имеет значение 0, но печатает "Вау, у тебя есть деньги на пирожки!" в противном случае. Посмотрите, что выводится на консоль.
//tenge обновите до значения 2000. Напишите оператор if-else-if, который печатает "Извини, но ты на мели!" если tenge имеет значение 0, печатает "Вау, у тебя есть деньги на пирожки!’ если tenge меньше 400, и печатает "Ого, поедешь домой на такси" в противном случае. Посмотрите, что выводится на консоль.
var tenge = 0
if tenge == 0 {
    print("Извини, но ты на мели!")
}
tenge = 300
if tenge == 0 {
    print("Извини, но ты на мели!")
} else {
    print("Вау, у тебя есть деньги на пирожки!")
}
tenge = 2000
if tenge == 0 {
    print("Извини, но ты на мели!")
} else if tenge < 400 {
    print("Вау, у тебя есть деньги на пирожки!")
} else {
    print("Ого, поедешь домой на такси")
}


//Lab 2.2 Задание 3
//Представьте, что вы собираетесь поужинать с друзьями и не можете решить, куда пойти. Двое из вас имеют очень твердое мнение и четко изложили свои требования к обеду следующим образом:
//Вы хотите поесть где-нибудь, где есть либо рыба, либо пицца
//Ваш друг хочет поесть где-нибудь с веганскими блюдами
//Другая подруга упоминает ресторан, который, по ее мнению, соответствует обоим вашим критериям. Блюда с вашими требованиями даны несколькими константами: hasFish(рыба), hasPizza(пицца), hasVegan(веганские блюда)
//Напишите оператор if-else, который выводит на консоль «Поехали!» если меню ресторана соответствуют требованиям друзей, а в противном случае будет выведено  «Извините, нам нужно выбрать другое место».
var hasVegan = true, hasPizza = true, hasFish = true
if hasVegan && (hasPizza || hasFish) {
    print("Поехали!")
} else {
    print("Извините, нам нужно выбрать другое место")
}


//Lab 2.2 Задание 4
//Допустим, вы думаете, идти ли вам на прогулку сегодня или нет. Вы решили выйти на прогулку если на улице нет дождя, или температура на улице выше 27 градусов, и на улице светит солнце. Создайте константу под названием isNiceWeather, которое будет равно "true" или "false" в зависимости от того, достаточно ли хороша погода. Затем мы напишем условие (через оператор "if"), которое проверит, достаточно ли хороша погода, и если да, то выводит на консоль "Я иду на прогулку!".
let isNiceWeather: Bool
var rain: Bool = false
var temp: Int = 30
var sun: Bool = true
if !rain && temp > 27 && sun {
    isNiceWeather = true
    print("Я иду на прогулку!")
}


//Lab 3 Задание 1
//Создайте переменную name и присвойте ей свое имя. Выведите эту переменную в консоль.
//Создайте константу favoriteQuote, которая содержит вашу любимую цитату. Выведите эту переменную в консоль таким образом:
//Моя любимая цитата - "Трава всегда зеленее на другой стороне".
//Создайте константу emptyString, которая содержит пустую строку. Через if else проверьте пустая ли строка. Если строка пустая выведите в консоль  «Там ничего нет». Иначе выведите «Кажется там что-то есть».
var myName = "Jane"
print("My name: \(myName)")
let favoriteQuote = "Find something that annoys you and built a business to fix it"
print("My favorite quote: \(favoriteQuote)")
let emptyString = ""
if emptyString.isEmpty {
    print("Там ничего нет")
} else {
    print("Кажется там что-то есть")
}


//Lab 3 Задание 2
//Создайте константу city типа String, где хранится название вашего родного города. Затем создайте константу region типа String, где хранится название вашей области. Теперь, создайте константу home, в которой хранится значение двух констант city и region (например, Семей, ВКО ). Выведите значение home в консоль. (Подсказка: можно соединить две строки через +)
let city: String = "Moscow"
let region: String = "Moscow"
let home = city + ", " + region
print(home)
//Создайте переменную introduction, которая содержит строку «Я живу в » . Объединить в переменные introduction и  константу home и выведите ее в консоль. (Подсказка: можно в одной строке добавить еще одну через += )
var introduction = "I live in "
print(introduction + home)
//Создайте константу name типа String и назначьте ей свое имя.
let nameLab3: String = "Jane"
//Затем создайте константу age типа Int и задайте ей ваш возраст.
let age: Int = 23
//Затем выведите следующую фразу, используя переменные внутри строки (Подсказка: делается через «\( )» ): «Меня зовут \(ВСТАВЬТЕ СВОЕ ИМЯ), и на следующий год мне будет \(ВСТАВЬТЕ СВОЙ ВОЗРАСТ) лет». (Подсказка: используйте математическое выражение +1 чтобы указать сколько вам будет на следующий год.)
print("Меня зовут \(nameLab3), и на следующий год мне будет \(age + 1) года")


//Lab 3 Задание 3
//Создайте константы name и surname и присвойте им представляющие имя и фамилию пользователя соответственно.
//Создайте константу fullName (полное имя), которая включает в себя name и surname. Выведите значение fullName в консоль.
//Представьте, что пользователи вашего фитнес трекера побьют предыдущие рекорды или цели. Вы можете им показать сообщение с поздравлением чтобы из ободрить..
//Для выполнения задачи необходимо объявить еще 2 переменные: previousBest (предыдущий рекорд пользователя по количеству шагов в день) и newBest (новый рекорд пользователя). Создайте новую константу congratulations и присвойте ей следующие строки:
//"Поздравляем, \(ВСТАВЬТЕ ПОЛНОЕ ИМЯ)! Вы превзошли свой предыдущий рекорд в \(ВСТАВЬТЕ ПРЕДЫДУЩИЙ РЕКОРД) шагов, сделав \(ВСТАВЬТЕ НОВЫЙ РЕКОРД) шагов вчера!" Вставьте fullName, previousBest и newBest в соответствующие места. Выведите значение congratulations в консоль.
let nameLab3_3 = "Edward"
let surname = "Norton"
let fullName = nameLab3_3 + " " + surname
var previousBest = 12103
var newBest = 13421
let congratulations = "Поздравляем, \(fullName)! Вы превзошли свой предыдущий рекорд в \(previousBest) шагов, сделав \(newBest) шагов вчера!"
print(congratulations)


//Lab 3 Задание 4
//4.1 Создайте две константы, nameInCaps и name типа String. В константе nameInCaps ваше имя записано с заглавными буквами. В константе name ваше имя записано строчными (маленькими) буквами. Напишите оператор if-else, который проверяет, совпадают ли nameInCaps и name. Если да, выведите “Эти две строки равны”, иначе выведите “Эти две строки не равны”.
let nameInCaps: String = "JANE", nameLab3_4: String = "jane"
if nameInCaps == nameLab3_4 {
    print("Эти две строки равны")
} else {
    print("Эти две строки не равны")
}
//Напишите новый оператор if-else, который также проверяет, совпадают ли nameInCaps и name. Однако на этот раз используйте метод lowercased() для каждой константы, чтобы сравнить их в нижнем регистре. Если они равны, напечатайте следующие выражения:
//“\(ВСТАВЬТЕ ВЕРСИЮ С ЗАГЛАВНЫМИ БУКВАМИ ) и \(ВСТАВЬТЕ ВЕРСИЮ С МАЛЕНЬКИМИ БУКВАМИ) совпадают". Иначе, выведите:
//“\(ВСТАВЬТЕ ВЕРСИЮ С ЗАГЛАВНЫМИ БУКВАМИ) и \(ВСТАВЬТЕ ВЕРСИЮ С МАЛЕНЬКИМИ БУКВАМИ) не совпадают”.
if nameInCaps.lowercased() == nameLab3_4.lowercased() {
    print("\(nameInCaps) и \(nameLab3_4) совпадают")
} else {
    print("\(nameInCaps) и \(nameLab3_4) не совпадают")
}
//4.2 Мы знаем, что если имя сына такое же, как у отца, то мы используем слово «Jr.». Например, “Robert Downey Jr.” (Роберту Дауни-младший (сын)) и Robert Downey (отец). Если имя заканчивается на «Jr.», мы понимаем, что это имя уже используется второе поколение. Напишите код, который проверяет, используется ли имя у второго поколения. Если да, выведите «Это имя используется второе поколение»
if fullName.hasSuffix("Jr.") {
    print("Это имя используется второе поколение")
}
//4.3 Предположим, вы пытаетесь найти на своем компьютере документ, содержащий знаменитый монолог Гамлета, написанный Шекспиром. Вы пишете простое приложение, которое будет проверять каждый документ, чтобы увидеть, содержит ли он фразу «быть или не быть». С помощью метода contains() напишите ниже оператор if, который будет проверять, содержит ли "textToSearchThrough" "textToSearchFor". Если это так, выведите «Я нашел!» Не забудьте сделать проверку нечувствительной к регистру.
let textToSearchThrough = "быть или не быть вот в чём вопрос"
let textToSearchFor = "быть или не быть"
if textToSearchThrough.lowercased().contains(textToSearchFor.lowercased()) {
    print("Я нашел!")
}
//4.4 Выведите в консоль количество символов в вашем имени, используя свойство «count» для name.
print("Length of the name: \(name.count)")


//Lab 4 Задание 1
//Создайте функцию под названием introduceMyself, которая выводит краткое приветствие о вас. Вызовите функцию и посмотрите результат.
func introduceMyself() {
    print("Hi! I'm Jane")
}
introduceMyself()


//Lab 4 Задание 2
//2.1 Мы сейчас напишем программу, которая используется во многих фитнес трекерах. Для этого вам нужно будет использовать функции. Например, у вас есть фитнес трекер, который считает количество шагов в переменной steps. Количество шагов увеличивается с каждым шагом и это повторяющийся процесс. Поэтому этот процесс можно превратить в функцию. Для этого нужно создать переменную steps. Затем напишите функцию incrementSteps, которая будет увеличивать steps на единицу, и выводить его значение в консоль. Вызовите функцию несколько раз.
var stepsLab4 = 40
func incrementSteps() {
    stepsLab4 += 1
    print(stepsLab4)
}
incrementSteps()
incrementSteps()
//2.2 Представьте, что пользователь поставил себе цель, сколько шагов в день он хочет пройти. Его цель хранится в константе goal. Если вы хотите показать прогресс, то можно внутри функции использовать поток управления (if else), который проверяет сколько шагов осталось до цели и выдает результат. Для этого нужно создать функцию progressUpdate Функция должна вывести:
//«У вас хорошее начало», если steps меньше 10% от goal,
//«Вы почти на полпути!» если steps меньше половины goal,
//«Вы на полпути!» если steps меньше 90% от goal,
//«Вы почти у цели!» если steps меньше, чем goal,
//«Вы превзошли свою цель!» в остальных случаях.
//Вызовите функцию и посмотрите на результат.
let goalLab4 = 100
func progressUpdate() {
    if stepsLab4 < (goalLab4 / 100 * 10) {
        print("У вас хорошее начало")
    } else if stepsLab4 < (goalLab4 / 100 * 50) {
        print("Вы почти на полпути!")
    } else if stepsLab4 < (goalLab4 / 100 * 90) {
        print("Вы почти у цели!")
    } else {
        print("Вы превзошли свою цель!")
    }
}
progressUpdate()


//Lab 4 Задание 3
//Создайте функцию introduction, которая знакомит человека с другими. У этой функции два параметра name и home типа String и один параметр age типа Int. Функция должна напечатать короткую информацию о человеке. Если ввести значение «Олжас», «Алматы» и 33, то функция должна вывести «Олжас, 33 года, город Алматы». Вызовите функцию и посмотрите результат.
func introduction(name: String, home: String, age: Int) {
    print("\(name), \(age) года, город \(home)")
}
introduction(name: "Женя", home: "Алматы", age: 23)


//Lab 4 Задание 4
//4.1 Перепишите функцию progressUpdate с двумя параметрами steps и goal типа Int.
//Как ранее функция должна вывести:
//«У вас хорошее начало», если steps меньше 10% от goal,
//«Вы почти на полпути!» если steps меньше половины goal,
//«Вы на полпути!» если steps меньше 90% от goal,
//«Вы почти у цели!» если steps меньше, чем goal,
//«Вы превзошли свою цель!» в остальных случаях.
//Вызовите функцию несколько раз с разными значениями steps и goal. Проверьте результат.
func progressUpdate2(steps: Int, goal: Int) {
    if steps < (goal / 100 * 10) {
        print("У вас хорошее начало")
    } else if steps < (goal / 100 * 50) {
        print("Вы почти на полпути!")
    } else if steps < (goal / 100 * 90) {
        print("Вы почти у цели!")
    } else {
        print("Вы превзошли свою цель!")
    }
}
progressUpdate2(steps: 500, goal: 1200)
//4.2 Давайте напишем функцию для фитнес трекера, которая поможет бегунам не терять темп чтобы постичь к цели. Напишите функцию под названием pacing, которая измеряет темп и принимает четыре параметра currentDistance, totalDistance, currentTime и goalTime. Все они типа Double. Ваша функция должна вычислять темп пользователя, сравнить его с нужным темпом goalTime. Если темп больше, выведите «Так держать!» в консоль, в противном случае выведите «Тебе нужно поднапрячься немного сильнее!»
//Формула темпа: pace = currentTime/(currentDistance/totalDistance)
func pacing(currentDistance: Double, totalDistance: Double, currentTime: Double, goalTime: Double) {
    var pace = currentTime/(currentDistance/totalDistance)
    if pace > goalTime {
        print("Так держать!")
    } else {
        print("Тебе нужно поднапрячься немного сильнее!")
    }
}
pacing(currentDistance: 120, totalDistance: 200, currentTime: 20, goalTime: 34)


//Lab 4 Задание 5
//5.1 Напишите функцию которая называется greeting. Создайте параметр name типа String и возвращает тип String. Если вы дали значение «Олжас», то функция возвращает текст в виде: «Привет Олжас, как твои дела?» Выведите в консоль функцию.
func greeting(name: String) -> String {
    return "Привет \(name), как твои дела?"
}
print(greeting(name: "Jo"))
//5.2 Напишите функцию c двумя параметрами типа Int и возвращает значение типа Int. Функция должна умножить два значения и добавить к нему 2 и вернуть результат. Выведите в консоль функцию.
func action(firstNum: Int, secondNum: Int) -> Int{
    return firstNum * secondNum + 2
}
print(action(firstNum: 2, secondNum: 3))


//Lab 5 Задание 1
//Предположим, вы являетесь координатором общественного благотворительного мероприятия и ведете список зарегистрированных. Создайте переменную registrationList, который будет хранит имя зарегистрированных в типе данных String. Массив должен быть пустым.
//Ваша подруга Сара первая зарегистрировалась на мероприятие. Добавьте ее имя в registrationList, используя метод append(). Выведите содержимое массива в консоль.
//Добавьте четыре дополнительных имени в массив с помощью оператора ‘+=’. Все имена должны быть добавлены за один шаг. Выведите содержимое массива в консоль.
//Используйте метод insert(_: at:), чтобы добавить имя “Алмас” в массив в качестве второго элемента. Распечатайте содержимое массива.
//Кто то не смог прийти и передал свое место другу. Используя индекс массива, замените шестой элемент на “Алуа”. Выведите содержимое массива в консоль.
//Используйте метод removeLast() в registrationList. Если все сделано правильно, должно удалиться имя “Алуа” из массива. Сохраните результат removeLast() в новую константу deletedItem, затем выведите в консоль deletedItem.
var registrationList: [String] = []
registrationList.append("Sara")
print(registrationList)
registrationList += ["Peter", "Olga", "Anna", "Jo"]
print(registrationList)
registrationList.insert("Almas", at: 1)
print(registrationList)
registrationList[5] = "Aliya"
print(registrationList)
let deletedItem = registrationList.removeLast()
print(registrationList)
print(deletedItem)


//Lab 5 Задание 2
//Ваше приложение по фитнес трекеру показывает пользователем список возможных упражнений. Ваш фитнес трекер показывает пользователям список упражнений, сгруппированных по типу активности (например, упражнения по ходьбе, упражнения по бегу, по гимнастике и т. д.).
//Используя массивы типа String, создайте 2 списка из упражнении. В одном пусть будут упражнения для бега, в другом упражнения для ходьбы и в каждом минимум 2 упражнения.
//В вашем приложений вы хотите показать все эти упражнения на одном экране, сгруппированные по разделам. Создайте массив challenges, который содержит каждый список упражнении который вы создали (вложенный массив). Используя challenges выведите в консоль первый элемент из второго списка.
//В конце каждого месяца все упражнения сбрасываются. Используйте метод removeAll() удалите все упражнения из массива challenges.
//Создайте новый массив типа ‘String’, в котором будут упражнения которые пользователь сделал вместо доступных упражнении. Массив может быть пустым или содержать несколько элементов. Теперь напишите оператор if, который через isEmpty проверяет содержимое массива. Если массив пустой, выведите текст, который предлагает пользователю начать делать упражнения. Добавьте оператор else-if, который напечатает «Вы выбрали задание \( )», если число элементов в массиве равно 1. Затем добавьте оператор else, который напечатает «Вы выбрали несколько заданий», если в массиве больше 1 элементов.
var runExercises: [String] = ["бег на месте", "прыжки", "разножка"]
var walkExercises: [String] = ["ходьба на носках", "ходьба «гусиным шагом»"]
var challenges = runExercises + walkExercises
print(challenges[3])
challenges.removeAll()
var doneExercises: [String] = []
if doneExercises.isEmpty {
    print("Хотите начать делать упражнения?")
} else if doneExercises.count == 1 {
    print("Вы выбрали задание \(doneExercises[0])")
} else {
    print("Вы выбрали несколько заданий")
}


//Lab 5 Задание 3
//Создайте переменную dictionary типа [String: Int], которую можно использовать для поиска количества дней в определенном месяце. Ключом будет месяца, а значением количество дней в этом месяце. Например: январь - 31, февраль - 28, а март - 31. Выведите в консоль словарь.
//
//Используя синтаксис подскриптов (например player["Richard"] = 500), добавьте в словарь значение для апреля (April), равное 30. Выведите в консоль словарь.
//
//Это високосный год! Используйте метод updateValue(_:, forKey:), чтобы обновить количество дней в феврале до 29. Напечатайте словарь.
//Используйте синтаксис if-let, чтобы получить количество дней в январе. Если значение присутствует, напечатайте "January has 31 days", где 31 - это значение, полученное из словаря.
var dictionary: [String: Int] = ["January": 31, "February": 28, "March": 31]
print(dictionary)
dictionary["April"] = 30
print(dictionary)
dictionary.updateValue(29, forKey: "February")
print(dictionary)
if let daysCount = dictionary["January"] {
    print("January has \(daysCount) days")
}


//Lab 5 Задание 4
//Даны следующие массивы.
let shapesArray = ["Circle", "Square", "Triangle"]
let colorsArray = ["Red", "Green", "Blue"]
//Создайте с этими массивами новый словарь [String: [String]], где . shapesArray должен использовать ключ "Shapes", а colorsArray должен использовать ключ "Colors". Распечатайте полученный словарь.
//
//*Напечатайте последний элемент массива colorsArray, получив его через созданный вами словарь. Вам нужно будет использовать синтаксис if-let.
var newDictionary: [String: [String]] = [:]
newDictionary["Shapes"] = shapesArray
newDictionary["Colors"] = colorsArray
print(newDictionary)
if let lastColor = newDictionary["Colors"]?.last {
    print(lastColor)
}


//Lab 5 Задание 5
//В предыдущих упражнениях вы написали код, помогающий пользователям управлять темпом бега. Вы решаете, что могли бы использовать словарь, позволяющий пользователям сохранять различные темпы, с которыми они регулярно бегают или проводят интервальные тренировки.
//Создайте словарные шаги типа [String: Double] и назначьте ему ключи "Easy", "Medium" и "Fast", соответствующими значениям 10.0, 8.0 и 6.0. Эти цифры соответствуют пробегу мили в минутах. Распечатайте словарь.
var pace: [String: Double] = ["Easy": 10.0, "Medium": 8.0, "Fast": 6.0]
print(pace)
//Добавьте новую пару ключ/значение в словарь. Ключом должен быть "Sprint", а значением - 4.0. Распечатайте словарь.
pace["Sprint"] = 4.0
print(pace)
//Представьте, что пользователь, о котором идет речь, со временем становится быстрее и решает обновить свой темп во время пробежек. Обновите значения "Medium" и "Fast" до 7.5 и 5.8 соответственно. Распечатайте словарь.
pace["Medium"] = 7.5
pace["Fast"] = 5.8
print(pace)
//Представьте, что пользователь, о котором идет речь, решает не сохранять "Sprint". Удалите "Sprint" из словаря. Распечатайте словарь.
//Когда пользователь выбирает темп, вы хотите, чтобы приложение печатало о том, что оно будет поддерживать его / ее в темпе. Представьте, что пользователь выбирает "Medium". Получив доступ к значению из словаря, выведите инструкцию, в которой говорится: "Хорошо! Я буду поддерживать вас в темпе <ВСТАВИТЬ ЗНАЧЕНИЕ ТЕМПА ЗДЕСЬ> минута в милю".
pace.removeValue(forKey: "Sprint")
print(pace)
if let choose = pace["Medium"] {
    print("Хорошо! Я буду поддерживать вас в темпе \(choose) минут в милю")
}


//Lab 6 Задание 1
//1.1 Создайте цикл for-in, который принимает значения от 1 до 100 и печатает каждое из них.
for item in 1...100 {
    print(item)
}
//1.2 Создайте константу alphabet, который равен "ABCDEFGHIJKLMNOPQRSTUVWXYZ". Напечатайте каждую букву с его индексом.
let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
for (index, letter) in alphabet.enumerated() {
    print("Letter \(letter) is at index \(index)")
}
//1.3 Создайте словарь [String: String], где ключи - это названия стран, а значения - их столицы. Включите как минимум три пары ключ/значение в свою коллекцию, затем используйте цикл for-in, чтобы перебрать пары и вывести ключи и значения в предложении.
//(Например: “Столица Казахстана - Астана”)
let countries: [String: String] = ["UK": "London", "Kazakhstan": "Astana", "Russia": "Moscow"]
for (country, capital) in countries {
    print("Capital of \(country) - \(capital)")
}


//Lab 6 Задание 2
//Предположим, что ваше приложение содержит список различных упражнении, которые можно отслеживать. Вы хотите отобразить каждый элемент списка пользователю. Используйте цикл for-in, чтобы пройти по упражнениям ниже и распечатать каждое упражнение.
//Теперь предположим, что ваше приложение использует словарь, чтобы отслеживать средний пульс во время каждого из движений в movements. Ключи соответствуют движениям, перечисленным выше, а значения соответствуют среднему пульсу. Циклом for-in переберите и печатайте сообщения, сообщающие пользователю его/её средний пульс во время каждого упражнения.
let listOfExercises = ["squats", "bridges", "flutter kicks", "superman"]
for exercise in listOfExercises {
    print(exercise)
}
var exercisesAndPulse: [String: Int] = ["squats": 140, "bridges": 120, "flutter kicks": 150, "superman": 130]
for (exercise, pulse) in exercisesAndPulse {
    print("Your average pulse during \(exercise) is \(pulse)")
}


//Lab 6 Задание 3
//Создайте цикл while, который имитирует бросание кубика с шестью гранями до тех пор, пока не выпадет единица. После каждого броска распечатайте значение. (Подсказка: используйте Int.random(in: 1...6), чтобы сгенерировать случайное число от 1 до 6).
var number = 0
while number != 1 {
    number = Int.random(in: 1...6)
    print(number)
}


//Lab 6 Задание 4
//Вам может понадобиться помощь вашего приложения для отслеживания фитнеса, чтобы помочь бегунам отслеживать и улучшать свой темп. Беговой темп - это количество шагов, которое бегун делает за минуту. Чтобы помочь с этим, вы решаете разрешить пользователю вводить частоту, после чего ваше приложение будет воспроизводить звук с каждым интервалом, необходимым для выполнения следующего шага.
//Для этого создайте константу ‘cadence’ (частота бега) и переменную ‘testSteps’. Используйте цикл while, чтобы вывести "Сделайте шаг" на консоль 10 раз. После того, как вы успешно напечатаете "Сделайте шаг" в консоли 10 раз, добавьте следующий код в конец вашего цикла while: Thread.sleep(forTimeInterval: 60/’частота бега’). Это приведет к паузе между каждой итерацией цикла while, так что инструкции print действительно будут выполняться в нужном темпе.
//Воссоздайте приведенный выше пример частоты бега, используя цикл repeat-while.
let cadence = 50
var testSteps = 0
//while testSteps < 10 {
//    print("Сделайте шаг")
//    testSteps += 1
//    Thread.sleep(forTimeInterval: 60.0 / Double(cadence))
//}
//repeat {
//    print("Сделайте шаг")
//    testSteps += 1
//    Thread.sleep(forTimeInterval: 60.0 / Double(cadence))
//} while testSteps < 10


//Lab 6 Задание 5
//Создайте словарь [String: String], где ключами являются названия городов, а значениями - их заглавные буквы (например Almaty: Ala ). Включите в свою коллекцию по крайней мере 4 пары ключ/ значение, причем одна из них является вашим родным городом. Затем пройдитесь по этому словарю снова, печатая ключи и значения в предложении, но добавьте оператор if, который будет проверять, является ли текущая итерация вашим родным городом. Если это так, напечатайте ("Я нашел свой город!") и выйдите из цикла.
let cities: [String: String] = ["Almaty": "A", "Moscow": "M", "London": "L", "Ottawa": "O"]
for (city, firstLetter) in cities {
    if city == "Moscow" {
        print("Я нашел свой город!")
        break
    } else {
        print(city, firstLetter)
    }
}


//Lab 6 Задание 6
//Вы решаете, что хотите, чтобы пользователи вашего приложения могли вводить диапазон сердечного ритма, который они хотели бы достичь, и затем вы хотите, чтобы приложение предлагало упражнения, при выполнении которых в прошлом пользователь достигал этого диапазона сердечного ритма. Словарь movementHeartRates ниже содержит ключи, соответствующие движениям, которые приложение отслеживает, и значения, соответствующие среднему сердечному ритму пользователя, который ваш фитнес-трекер исторически мониторил во время выполнения данного упражнении.
//Пройдитесь по словарю movementHeartRates ниже и если сердечный ритм не попадает в диапазон между lowHR и highHR, продолжайте переходить к следующему движению и сердечному ритму. В противном случае, напечатайте "Вы могли бы сделать <ВСТАВЬТЕ ЗДЕСЬ ДВИЖЕНИЕ>".
var lowHR = 130
var highHR = 200
let movementHeartRates: [String: Int] = ["squats": 140, "bridges": 120, "flutter kicks": 150, "superman": 130]
for (movement, heartRate) in movementHeartRates {
    if (heartRate <= lowHR || heartRate >= highHR) {
        print("Вы могли бы сделать \(movement)")
    }
}


//Lab 6 Задание 7
//Создайте константу text равную тексту - "Столица Казахстана - Астана". Посчитайте и выведите количество буквы "а" в тексте.
let text = "Столица Казахстана - Астана"
let letterA = "а"
let letters = text.lowercased().split(separator: "")
var count = 0
for letter in letters {
    if letter == letterA {
        count += 1
    }
}
print("Количество букв '\(letterA)' в тексте: \(count)")


//Lab 6 Задание 8
//Создайте константу array равную [0, 1, 2, 3, 4, 1, 5, 6, 2, 1]. Посчитайте и выведите количество цифры 1 в массиве.
let array = [0, 1, 2, 3, 4, 1, 5, 6, 2, 1]
let countOne = array.filter { num in
    num == 1
}.count
print("Количество цифр '1' в тексте: \(countOne)")


//Lab 7 Структуры
//Lab 7 Задание 1 
// Представьте, что вы создаете приложение, которое будет отслеживать местоположение. Создайте структуру ‘GPS’ с двумя переменными свойствами, latitute(широта) и longitude(долгота), со значениями по умолчанию 0.0.
//Создайте экземпляр переменной ‘GPS’ с именем ‘somePlace’. Он должен быть инициализирован без предоставления каких-либо значении. Распечатайте широту и долготу ‘somePlace’, которые должны быть равны 0.0 для обоих.
//Измените широту ‘somePlace’ на 51.514004 и долготу на 0.125226, затем распечатайте обновленные значения.
struct GPS{
    var latitute = 0.0
    var longitude = 0.0
}
var somePlace: GPS = GPS()
print(somePlace)
somePlace = GPS(latitute: 51.514004, longitude: 0.125226)
print(somePlace)


//Lab 7 Задание 2
//Представьте, что вы делаете социальное приложение для обмена книгами. Создайте структуру ‘Book’ с четырьмя свойствами: ‘title’ (название), ’author’ (автор), ‘pages’ (страницы) и ‘price’ (цена). Значения по умолчанию для названия и автора должны быть пустой строкой. страницы по умолчанию должны быть равны 0, а цена по умолчанию должна быть равна 0.0.
//Создайте переменную экземпляр Book с именем ‘favoriteBook’ без указания каких-либо значении. Распечатайте название любимой книги. Отражает ли оно в настоящее время название вашей любимой книги? Возможно нет. Измените все четыре свойства ‘favoriteBook’, чтобы они отражали вашу любимую книгу. Затем, используя свойства ’favoriteBook’, распечатайте факты о книге.
struct Book{
    var title = ""
    var author = ""
    var pages = 0
    var price = 0.0
}
var favoriteBook: Book = Book()
print("favoriteBook: \(favoriteBook)")
favoriteBook = Book(title: "Отцы и дети", author: "Иван Тургенев", pages: 288, price: 2400)
print("favoriteBook: \(favoriteBook)")


//Lab 7 Задание 3
//Ваше приложение для отслеживания фитнеса не было бы хорошим фитнес-трекером, если бы оно не помогало пользователям отслеживать свои тренировки. Чтобы отслеживать пробежку пользователя, вам нужно будет иметь какую-то структуру данных, которая может содержать информацию о тренировке. Для простоты вы сосредоточитесь конкретно на тренировках по бегу.
//Создайте структуру RunningWorkout. Он должен иметь свойства переменных для расстояния(distance), времени(time) и высота подъема(elevation). Все три свойства должны иметь значения по умолчанию 0.0.
//Создайте переменный экземпляр RunningWorkout с именем firstRun без указания каких-либо аргументов. Распечатайте все три свойства при firstRun. Это хороший пример того, когда уместно использовать значения по умолчанию, учитывая, что все тренировки по бегу начинаются с изменения расстояния, времени и высоты, равного 0.
//Теперь представьте, что на протяжении всего забега вы преодолеваете дистанцию в 2396 метров за 15,3 минуты и набираете высоту в 94 метра. Соответствующим образом обновите значения свойств firstrun. Выведите отчет о вашем запуске, используя значения каждого свойства.
struct RunningWorkout{
    var distance = 0.0
    var time = 0.0
    var elevation = 0.0
}
var firstRun: RunningWorkout = RunningWorkout()
print("firstRun = \(firstRun)")
firstRun = RunningWorkout(distance: 2396, time: 15.3, elevation: 94)
print("distance = \(firstRun.distance), time = \(firstRun.time), elevation = \(firstRun.elevation)")


//Lab 7 Задание 4
// Вы создали структуру GPS со значениями по умолчанию для свойств широты и долготы. Создайте свою структуру GPS снова, но на этот раз не указывайте значения по умолчанию. Оба свойства должны быть типа Double.
//Теперь создайте константный экземпляр GPS с именем someWhere и используйте инициализатор memberwise, чтобы установить широту на 51.514004, а долготу на 0.125226. Выведите значения каждого свойства somePlace.
struct GPS2 {
    var latitute: Double
    var longitude: Double
}
let someWhere: GPS2 = GPS2(latitute: 51.514004, longitude: 0.125226)
print("latitute = \(someWhere.latitute), longitude = \(someWhere.longitude)")


//Lab 7 Задание 5
//5.  Вы также создали структуру книги со свойствами title, author, pages и price. Создайте эту структуру снова без значений по умолчанию. Присвойте каждому свойству соответствующий тип. Объявите экземпляр favoriteBook и передайте значения вашей любимой книги, используя инициализатор memberwise. Распечатайте информацию о вашей любимой книге, используя свойства favoriteBook.
struct Book2{
    var title: String
    var author: String
    var pages: Int
    var price: Double
}
var favoriteBook2: Book2 = Book2(title: "Отцы и дети", author: "Иван Тургенев", pages: 288, price: 2400)
print("title = \(favoriteBook2.title), author = \(favoriteBook2.author), pages = \(favoriteBook2.pages), price = \(favoriteBook2.price)")


//Lab 7 Задание 6
//6. Создайте структуру Laptop(ноутбук) с тремя переменными свойствами:  screenSize (размер экрана) типа Int, repairCount типа Int и yearPurchased типа Int. screenSize по умолчанию равен 13, repairCount по умолчанию равно 0, и оставьте yearPurchased без значения по умолчанию. Объявите два экземпляра Laptop, используя два предоставленных инициализатора memberwise.
struct Laptop {
    var screenSize: Int = 13
    var repairCount: Int = 0
    var yearPurchased: Int?
}
var laptop = Laptop(screenSize: 12, repairCount: 1, yearPurchased: 2012)
var laptop2 = Laptop(screenSize: 15, repairCount: 2)


//Lab 7 Задание 7
//7. Создайте структуру Height с двумя переменными свойствами, heightInInches и heightInCentimeters. Оба должны быть типа Double.
//Создайте два инициализатора. Один инициализатор примет Double, который представляет высоту в дюймах. Другой инициализатор примет Double, который представляет высоту в сантиметрах. Каждый инициализатор должен принимать переданное значение и использовать его для установки свойства, соответствующего переданной единице измерения. Затем он должен установить другое свойство, вычислив правильное значение из переданного значения. Подсказка: 1 дюйм = 2,54 сантиметра.
//Например: Если вы используете инициализатор для дюймов, чтобы передать высоту 65, инициализатор должен установить heightInInches равной 65, а heightInCentimeters - 165,1.
//Теперь создайте переменный экземпляр Height с именем someonesHeight. Используйте инициализатор для дюймов, чтобы установить высоту равной 65. Распечатайте значение высоты в сантиметрах и убедитесь, что оно равно 165,1.
//Теперь создайте переменный экземпляр Height с именем myHeight и инициализируйте его своим собственным height. Убедитесь, что оба параметра -heightInInches и heightInCentimeters - являются точными.
struct Height {
    var heightInInches: Double
    var heightInCentimeters: Double
    init(inches: Double) {
        self.heightInInches = inches
        self.heightInCentimeters = inches * 2.54
    }
    init(centimeters: Double) {
        self.heightInCentimeters = centimeters
        self.heightInInches = centimeters / 2.54
    }
}
var myHeight = Height(centimeters: 12.7)
print("Высота в дюймах: \(myHeight.heightInInches), высота в сантиметрах: \(myHeight.heightInCentimeters)")


//Lab 7 Задание 8
//8. Для большинства приложений вам потребуется структура данных для хранения информации о пользователе. Создайте пользовательскую структуру, которая имеет свойства для получения основной информации о пользователе. Добавьте свойства name (имя пользователя), age (возраст), height (рост), weight (вес) и activityLevel (уровень активности). name- String, age  - значением Int, weight и height - типом Double, а activityLevel - значением Int, которое будет представлять оценку 1-10 того, насколько они активны.
//Создайте переменный экземпляр User и назовите его своим именем. Используйте инициализатор memberwise для передачи информации о себе. Затем распечатайте ваш экземпляр.
struct User {
    var name: String
    var height: Double
    var weight: Double
    var activityLevel: Int
}
var Jane = User(name: "Jane", height: 165, weight: 60.2, activityLevel: 6)
print(Jane)


//Lab 7 Задание 9
//9. В предыдущих упражнениях вы работали с расстоянием в примере приложения для отслеживания фитнеса в виде простого числа. Однако расстояние может быть представлено с использованием различных единиц измерения. Создайте структуру Distance, которая будет представлять расстояние в различных единицах измерения. Как минимум, у него должно быть свойство meters и свойство feet. Создайте инициализатор, соответствующий каждому свойству (т.е. если у вас есть только два свойства для метров и футов, тогда у вас будет два инициализатора), которые будут принимать расстояние в одной единице измерения и присваивать правильное значение обеим единицам измерений. Подсказка: 1 метр = 3,28084 фута.
//Например: Если вы используете инициализатор для метров и установите расстояние 1600, инициализатор должен установить значение метров равным 1600, а футов - 5249,344.
//Теперь создайте экземпляр Distance с именем mile. Используйте инициализатор для метров, чтобы установить расстояние равным 1600. Распечатайте значение параметра для футов и убедитесь, что оно равно 5249,344.
//Теперь создайте другой экземпляр Distance и задайте ему какое-нибудь другое расстояние. Убедитесь, что оба свойства установлены правильно.
struct Distance{
    var distanceInMeters: Double
    var distanceInFeet: Double
    init(meters: Double) {
        self.distanceInMeters = meters
        self.distanceInFeet = meters * 3.28084
    }
    init(feet: Double) {
        self.distanceInMeters = feet / 3.28084
        self.distanceInFeet = feet
    }
}
var mile = Distance(meters: 1600)
print(mile.distanceInFeet)
var dist = Distance(feet: 5000)
print(dist.distanceInFeet, dist.distanceInMeters)


//Lab 7 Задание 10
//10. У вас уже есть структура Book, добавьте туда метод с именем description, который будет выводить факты о книге. Затем создайте экземпляр Book и вызовите этот метод для этого экземпляра.
struct Book3{
    var title: String
    var author: String
    var pages: Int
    var price: Double
    func description() {
        print("title = \(title), author = \(author), pages = \(pages), price = \(price)")
    }
}
var newBook = Book3(title: "Клуб «5 часов утра»", author: "Робин Шарма", pages: 480, price: 3000)
newBook.description()


//Lab 7 Задание 11
//11. Ниже для вас была создана структура Post, представляющая собой обычную публикацию в социальных сетях. Добавьте изменяющий метод к сообщению с именем like, который увеличит количество лайков на единицу. Затем создайте экземпляр Post и вызовите для него функцию like(). Распечатайте свойство likes до и после вызова метода, чтобы увидеть, было ли увеличено значение или нет.
struct Post {
    var message: String
    var likes: Int
    var numberOfComments: Int
    mutating func like() {
        likes += 1
    }
}
var myPost = Post(message: "hi", likes: 10, numberOfComments: 0)
print(myPost.likes)
myPost.like()
print(myPost.likes)


//Lab 7 Задание 12
//12. Ниже для вас была создана структура RunningWorkout. Добавьте метод для выполнения тренировки под названием postWorkoutStats, который выводит подробную информацию о пробежке. Затем создайте экземпляр RunningWorkout и вызовите функцию postWorkoutStats().
struct RunningWorkout2 {
    var distance: Double
    var time: Double
    var elevation: Double
    func postWorkoutStats() {
        print("distance = \(distance), time = \(time), elevation = \(elevation)")
    }
}
var workout = RunningWorkout2(distance: 120, time: 20, elevation: 50)
workout.postWorkoutStats()


//Lab 7 Задание 13
//13. Ниже для вас была создана структура Steps, представляющая данные отслеживания шагов за день. В нем указано целевое количество шагов на день и количество шагов, сделанных на данный момент. Создайте метод для шагов с именем takeStep(), который увеличивает значение шагов на единицу. Затем создайте экземпляр Steps и вызовите takeStep(). Выведите значение экземпляра свойства steps до и после вызова метода.
struct Steps {
    var steps: Int
    var goal: Int
    mutating func takeStep() {
        steps += 1
    }
}
var stepsToday = Steps(steps: 1200, goal: 10000)
print(stepsToday.steps)
stepsToday.takeStep()
print(stepsToday.steps)


//Lab 7 Задание 14
//14. Создайте структуру Rectangle, который имеет два свойства: width(ширина) и height(высоты). Добавьте вычисляемое свойство, которое вычисляет площадь прямоугольника (т.е. ширину * высоту). Создайте экземпляр Rectangle и выведите свойство area.

struct Rectangle {
    var width: Double
    var height: Double
    var area: Double {
        return width * height
    }
}
let rectangle = Rectangle(width: 50, height: 32.4)
print("Площадь прямоугольника: \(rectangle.area)")


//Lab 7 Задание 15
//15. В приведенной ниже структуре Height высота представлена как в дюймах, так и в сантиметрах. Однако, если значение heightInInches изменено, то значения heightInCentimeters также должны быть скорректированы в соответствии с ним. Добавьте didSet к каждому свойству, которое будет проверять, соответствует ли другое свойство тому, каким оно должно быть, и, если нет, устанавливает правильное значение.
//Создайте экземпляр Height, а затем измените одно из его свойств. Распечатайте другое свойство, чтобы убедиться, что оно было скорректировано соответствующим образом.
struct Height2 {
    var heightInInches: Double {
        didSet {
            heightInCentimeters = heightInInches * 2.54
        }
    }
    var heightInCentimeters: Double {
        didSet {
            heightInInches = heightInCentimeters / 2.54
        }
    }
    init(heightInInches: Double) {
        self.heightInInches = heightInInches
        self.heightInCentimeters = heightInInches * 2.54
    }
    
    init(heightInCentimeters: Double) {
        self.heightInCentimeters = heightInCentimeters
        self.heightInInches = heightInCentimeters / 2.54
    }
}
var newHeight = Height2(heightInCentimeters: 200)
print(newHeight.heightInInches)


//Lab 7 Задание 16
//16. Приведенная ниже структура RunningWorkout содержит информацию о беговых тренировках ваших пользователей. Однако вы решаете добавить информацию о среднем времени прохождения мили. Добавьте вычисляемое свойство под названием averageMileTime, которое использует расстояние и время для вычисления среднего времени прохождения мили пользователем. Предположим, что расстояние указано в метрах, а 1600 метров - это миля.
//Создайте экземпляр Running Workout и распечатайте свойство среднего времени прохождения мили. Убедитесь, что он работает правильно.
struct RunningWorkout3 {
    var distance: Double
    var time: Double
    var elevation: Double
    var averageMileTime: Double {
        return time/(distance/1600)
    }
    }
var myRun = RunningWorkout3(distance: 16000, time: 20, elevation: 120)
print(myRun.averageMileTime)
//В приведенной ниже структуре Steps добавьте willSet к свойству steps, которое будет проверять, равно ли новое значение цели, и, если это так, печатает поздравительное сообщение. Создайте экземпляр Steps, где steps равно 9999, а goal - 10000, затем вызовите takeStep() и посмотрите, напечатано ли ваше сообщение на консоли.
struct Steps2 {
    var steps: Int {
        willSet(steps){ if steps == goal {
            print("Congratulations!")
        }
        }
    }
    var goal: Int
    mutating func takeStep() {
        steps += 1
    }
}
var mySteps = Steps2(steps: 9999, goal: 10000)
mySteps.takeStep()


//Lab 7 Задание 17
//17. Представьте, что у вас есть приложение, которое требует от пользователя входа в систему. У вас может быть пользовательская структура, аналогичная показанной ниже. Однако, в дополнение к отслеживанию конкретной пользовательской информации, вам может понадобиться способ узнать, кто является текущим пользователем, вошедшим в систему.
//Создайте свойство currentUser в приведенной ниже структуре и назначьте его как User и заполните его вашими данными. Теперь вы можете получить доступ к текущему пользователю через структуру User. Распечатайте свойства текущего пользователя.

struct User2{
    var username: String
    var email: String
    var age: Int
    static var currentUser = User2(username: "Jane", email: "zvetochnic@gmail.com", age: 23)
}
print(User2.currentUser)


//Lab 8 Задание 1.
//Данные упражнения основаны на игре, в которой космический корабль избегает
//препятствий в космосе. Корабль находится внизу и может перемещаться только
//влево и вправо, а препятствия "падают" сверху вниз. В течение упражнений вы
//создадите классы, которые представляют различные типы космических кораблей,
//которые могут использоваться в игре.
//Первым шагом необходимо создать класс 'Spaceship' с тремя свойствами: 'name',
//'health' и 'position'. По умолчанию значение 'name' должно быть пустой строкой, а
//'health' должен быть равен 0. Положение корабля будет представлено целым
//числом, где отрицательные числа помещают корабль дальше влево, а
//положительные числа - дальше вправо. Значение по умолчанию для 'position'
//должно быть 0.
//Создайте константу с названием 'falcon' и сделайте ее экземпляром класса
//'Spaceship'. После установите name на "Falcon".
//Вернитесь и добавьте классу 'Spaceship' метод 'moveLeft()'. Этот метод должен
//сдвинуть корабль на одну позицию влево. Добавьте такой же метод с именем
//'moveRight()', который будет сдвигать корабль на одну позицию вправо. После
//того, как эти методы будут созданы, используйте их, чтобы сдвинуть корабль
//'falcon’ дважды влево и один раз вправо. Выведите в консоль новое положение
//корабля falcon после каждого изменения позиции.
//Последнее, что нужно классу 'Spaceship' это добавить метод для обработки
//ситуации, когда корабль попадает под удар. Вернитесь и добавьте метод 'wasHit()' к
//Spaceship. Этот метод должен уменьшать здоровье корабля на 5, а затем, если
//здоровье меньше или равно 0, печатать "Извините, ваш корабль был сбит слишком
//много раз. Хотите сыграть еще раз?". Как только этот метод будет создан, вызовите
//его для falcon и напечатайте значение здоровья корабля.
class Spaceship {
    var name = ""
    var health = 0
    var position = 0
    func moveLeft() {
        position -= 1
    }
    func moveRight() {
        position += 1
    }
    func wasHit() {
        health -= 5
        if health <= 0 {
            print("Извините, ваш корабль был сбит слишком много раз. Хотите сыграть еще раз?")
        }
    }
    init(name: String = "", health: Int = 0, position: Int = 0) {
        self.name = name
        self.health = health
        self.position = position
    }
}
let falcon = Spaceship()
falcon.name = "Falcon"
falcon.moveLeft()
falcon.moveLeft()
falcon.moveRight()
print("New position of Falcon = \(falcon.position)")
falcon.wasHit()
print(falcon.health)


//Lab 8 Задание 2.
//Создайте новый класс 'Fighter', который наследуется от класса 'Spaceship'. Добавьте
//переменное свойство 'weapon', значение по умолчанию которого является пустой
//строкой, и переменное свойство 'remainingFirePower', значение по умолчанию
//которого равно 5.
//Создайте новый экземпляр класса Fighter с именем 'destroyer'. 'destroyer' сможет
//стрелять по приближающимся объектам, чтобы избежать столкновений с ними.
//После присвойте 'weapon' значение "лазер" и 'remainingFirePower' значение 10.
//Обратите внимание, что поскольку класс Fighter наследуется от Spaceship, он также
//имеет свойства как 'name', 'health' и 'position', а также методы для 'moveLeft()',
//'moveRight()' и 'wasHit()', хотя вы не добавляли их в класс Fighter. Зная это,
//установите 'name' значение "Destroyer", напечатайте 'position', затем вызовите
//'moveRight()' и снова напечатайте 'position'.
//Попытайтесь распечатать 'weapon' на falcon. Почему это не работает? Ответьте на
//этот вопрос в виде комментарии или по команде print ниже и удалите любой код,
//который не компилируется.
//Добавьте метод к классу Fighter с названием 'fire()'. Этот метод должен проверять,
//является ли значение 'remainingFirePower' больше нуля, и если это так, то должен
//уменьшать 'remainingFirePower' на единицу, а если 'remainingFirePower' меньше
//нуля, выведите на экран сообщение "У вас больше нет оружейной мощности".
//Вызовите метод 'fire()' на экземпляре ‘destroyer’ несколько раз и после каждого
//вызова метода напечатайте значение 'remainingFirePower'.
class Fighter: Spaceship {
    var weapon = ""
    var remainingFirePower = 5
    func fire() {
        if remainingFirePower > 0 {
            remainingFirePower -= 1
        } else {
            print("У вас больше нет оружейной мощности")
        }
    }
    init(name: String = "", health: Int = 0, position: Int = 0, weapon: String = "", remainingFirePower: Int = 5) {
        self.weapon = weapon
        self.remainingFirePower = remainingFirePower
        super.init(name: name, health: health, position: position)
    }
}
var destroyer = Fighter()
destroyer.name = "Destroyer"
destroyer.weapon = "лазер"
destroyer.remainingFirePower = 10
print(destroyer.position)
destroyer.moveRight()
print(destroyer.position)
print("распечатать 'weapon' на falcon не получится, так как это свойство класса Fighter, а falcon является экземпляром класса Spaceship")
destroyer.fire()
print(destroyer.remainingFirePower)
destroyer.fire()
print(destroyer.remainingFirePower)
destroyer.fire()
print(destroyer.remainingFirePower)


//Lab 8 Задание 3. Определите новый класс ShieldedShip, который наследуется от Fighter. Добавьте
//туда свойство shieldStrength со значением по умолчанию 25. Создайте новый
//экземпляр ShieldedShip под названием 'defender’. Установите 'name' на "Defender",
//'weapon' на "Cannon". Вызовите 'moveRight()' и распечатайте позицию, затем
//вызовите 'fire()' и распечатайте 'remainingFirePower'.
//Вернитесь к вашему классу ShieldedShip и переопределите метод wasHit(). Теперь
//этот метод должен проверять, больше ли 'shieldStrength' нуля. Если да, уменьшите
//shieldStrength на 5. В противном случае уменьшите 'health' на 5. Вызовите метод
//'wasHit()' на 'defender' и выведите значения 'shieldStrength' и 'health'.
//Когда 'shieldStrength' равнен 0, метод 'wasHit()' просто уменьшает значение 'health'
//на 5. Точно это же и делает метод 'wasHit()' в классе Spaceship! Вместо того чтобы
//переписывать его, можно было вызвать метод в суперклассе. Вернитесь к вашему
//методу 'wasHit()' в классе ShieldedShip и удалите код, где вы уменьшаете значение
//health на 5, заменив его вызовом метода в суперклассе. Вызовите метод 'wasHit()' на
//'defender', затем выведите значения 'shieldStrength' и 'health'.
class ShieldedShip: Fighter{
    var shieldStrength = 25
    
    override func wasHit() {
        if (shieldStrength > 0) {
            shieldStrength -= 5
        } else {
            super.wasHit()
        }
    }
}
var defender = ShieldedShip()
defender.name = "Defender"
defender.weapon = "Cannon"
defender.moveRight()
print(defender.position)
defender.fire()
print(defender.remainingFirePower)
defender.wasHit()
print(defender.shieldStrength, defender.health)
defender.wasHit()
print(defender.shieldStrength, defender.health)


//Lab 8 Задание 4. Заметьте, что каждый класс ниже имеет ошибку, которая говорит "Class has no
//initializers". В отличие от структур, классы не имеют инициализаторов по
//умолчанию. Вы можете избавиться от ошибки, предоставив значения по
//умолчанию для всех свойств как мы делали ранее, но лучше написать собственный
//инициализатор, это общепринятая и лучшая практика.
//Перейдите к классу Spaceship и добавьте инициализатор, который принимает значение для каждого свойства Spaceship и устанавливает свойства соответственно.
//Теперь создайте экземпляр для Spaceship ниже, назвав его falcon. Затем задайте все
//параметры. Название корабля должно быть "Falcon", а остальное на ваш выбор.
//Написание инициализаторов для подклассов может быть чутка сложным. Но нужно
//просто знать что мы пишем свои инициализаторы когда у свойств класса нет значении по умолчанию. А инициализация это просто подготовительный процесс экземпляра класса и т.д. для дальнейшего использования. Еще ваш инициализатор должен не только установить свойства, объявленные в подклассе, но также установить все
//неинициализированные свойства классов, от которых он наследуется.
//Перейдите к классу Fighter и напишите инициализатор, который принимает значения для каждого свойства Fighter и для каждого свойства Spaceship. Установите свойства
//соответственно. (Подсказка: инициализация свойств суперкласса выполняется с помощью super.init после того, как инициализируете все свойства подкласса).
var falcon2 = Spaceship(name: "Falcon", health: 30, position: 12)

//Суперкласс - это класс, от которого другой класс наследует свойства и методы
//Затем создайте экземпляр Fighter ниже под названием ‘destroyer’. Заполните все
//параметры. Имя корабля должно быть "Destroyer".
//Теперь точно так же и к классу ShieldedShip напишите инициализатор. Не забудьте, что
//свойства класса Fighter мы инициализируем с помощью super.init.
var destroyer2 = Fighter(name: "Destroyer", health: 10, position: 1, weapon: "пули")
let sameShip = falcon
print(sameShip.position, falcon.position)
sameShip.moveLeft()
print(sameShip.position, falcon.position)
//Дальше нужно создать константу 'sameShip’ и установить ее равной константе ‘falcon’
//которую мы создавали до этого. Выведите на консоль позицию(position) ‘sameShip’ и
//‘falcon’, затем вызовите moveLeft() на sameShip и снова выведите позицию sameShip и
//falcon. Изменились ли обе позиции? Почему? Если мы использовали структуры вместо
//классов, было бы то же самое? Предоставьте ваш ответ как комментарии или через
//оператор print ниже.
